// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/widyan/go-http-over-grpc/model"
)

// API_Interface is an autogenerated mock type for the API_Interface type
type API_Interface struct {
	mock.Mock
}

// CallAPI provides a mock function with given fields: ctx, url, method, payload, header
func (_m *API_Interface) CallAPI(ctx context.Context, url string, method string, payload interface{}, header []model.Header) ([]byte, error) {
	ret := _m.Called(ctx, url, method, payload, header)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, []model.Header) []byte); ok {
		r0 = rf(ctx, url, method, payload, header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}, []model.Header) error); ok {
		r1 = rf(ctx, url, method, payload, header)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CallAPIFormData provides a mock function with given fields: ctx, url, method, formData, headers
func (_m *API_Interface) CallAPIFormData(ctx context.Context, url string, method string, formData []model.FormData, headers []model.Header) ([]byte, error) {
	ret := _m.Called(ctx, url, method, formData, headers)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []model.FormData, []model.Header) []byte); ok {
		r0 = rf(ctx, url, method, formData, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []model.FormData, []model.Header) error); ok {
		r1 = rf(ctx, url, method, formData, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendToTelegram provides a mock function with given fields: url, method, tokenBOT, chatID, text, IsContainArstik
func (_m *API_Interface) SendToTelegram(url string, method string, tokenBOT string, chatID string, text string, IsContainArstik bool) {
	_m.Called(url, method, tokenBOT, chatID, text, IsContainArstik)
}

type NewAPI_InterfaceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewAPI_Interface creates a new instance of API_Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAPI_Interface(t NewAPI_InterfaceT) *API_Interface {
	mock := &API_Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// GinResponses is an autogenerated mock type for the GinResponses type
type GinResponses struct {
	mock.Mock
}

// AbortWithStatusJSONAndErrorCode provides a mock function with given fields: c, code, errorCode
func (_m *GinResponses) AbortWithStatusJSONAndErrorCode(c *gin.Context, code int, errorCode int) {
	_m.Called(c, code, errorCode)
}

// AbortWithStatusJSONAndInherited provides a mock function with given fields: c, code, errorCode, data, message
func (_m *GinResponses) AbortWithStatusJSONAndInherited(c *gin.Context, code int, errorCode int, data interface{}, message string) {
	_m.Called(c, code, errorCode, data, message)
}

// Json provides a mock function with given fields: c, code, data, message
func (_m *GinResponses) Json(c *gin.Context, code int, data interface{}, message string) {
	_m.Called(c, code, data, message)
}

// JsonWithCaptureError provides a mock function with given fields: c, err
func (_m *GinResponses) JsonWithCaptureError(c *gin.Context, err error) {
	_m.Called(c, err)
}

// JsonWithErrorCode provides a mock function with given fields: c, code, errorCode
func (_m *GinResponses) JsonWithErrorCode(c *gin.Context, code int, errorCode int) {
	_m.Called(c, code, errorCode)
}

type NewGinResponsesT interface {
	mock.TestingT
	Cleanup(func())
}

// NewGinResponses creates a new instance of GinResponses. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGinResponses(t NewGinResponsesT) *GinResponses {
	mock := &GinResponses{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

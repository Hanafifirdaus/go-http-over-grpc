// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"

	model "github.com/widyan/go-http-over-grpc/middleware/model"
)

// UsecaseInterface is an autogenerated mock type for the UsecaseInterface type
type UsecaseInterface struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: ctx, user
func (_m *UsecaseInterface) AddUser(ctx context.Context, user model.RequestUser) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RequestUser) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTokenServices provides a mock function with given fields: ctx, request
func (_m *UsecaseInterface) CreateTokenServices(ctx context.Context, request model.RequestToken) (model.ResponsesToken, error) {
	ret := _m.Called(ctx, request)

	var r0 model.ResponsesToken
	if rf, ok := ret.Get(0).(func(context.Context, model.RequestToken) model.ResponsesToken); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(model.ResponsesToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.RequestToken) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyAutorizationToken provides a mock function with given fields:
func (_m *UsecaseInterface) VerifyAutorizationToken() gin.HandlerFunc {
	ret := _m.Called()

	var r0 gin.HandlerFunc
	if rf, ok := ret.Get(0).(func() gin.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}

	return r0
}

type NewUsecaseInterfaceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsecaseInterface creates a new instance of UsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsecaseInterface(t NewUsecaseInterfaceT) *UsecaseInterface {
	mock := &UsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

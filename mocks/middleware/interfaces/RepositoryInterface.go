// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/widyan/go-codebase/middleware/entity"

	mock "github.com/stretchr/testify/mock"
)

// RepositoryInterface is an autogenerated mock type for the RepositoryInterface type
type RepositoryInterface struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: ctx, user
func (_m *RepositoryInterface) AddUser(ctx context.Context, user entity.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserBasedOnEmail provides a mock function with given fields: ctx, email
func (_m *RepositoryInterface) GetUserBasedOnEmail(ctx context.Context, email string) ([]entity.User, error) {
	ret := _m.Called(ctx, email)

	var r0 []entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewRepositoryInterfaceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryInterface creates a new instance of RepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryInterface(t NewRepositoryInterfaceT) *RepositoryInterface {
	mock := &RepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
